{"version":3,"sources":["ContactForm.js","ContactsList.js","Filter.js","services/local-storage.js","App.js","index.js"],"names":["toast","configure","Form","styled","form","FormField","label","Button","button","disabled","ContactForm","onAddContact","isNameUnique","useState","name","setName","number","setNumber","reset","btnDisabled","setBtnDisabled","useEffect","onSubmit","e","preventDefault","newContact","id","uuidv1","warning","htmlFor","type","value","onChange","target","List","ul","ListItem","div","ContactLine","ContactsList","contacts","onDelete","map","contact","key","onClick","Filter","onSearch","input","setInput","get","JSON","parse","localStorage","getItem","error","save","setItem","stringify","Container","contactsReducer","state","action","payload","filter","contactId","ReactDOM","render","useReducer","storage","dispatch","setFilter","contactsToShow","useMemo","toLowerCase","includes","every","length","query","document","getElementById"],"mappings":"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","file":"static/js/main.32ac9aa0.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport uuidv1 from 'uuid/v1';\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\ntoast.configure();\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  min-width: 600px;\r\n`;\r\n\r\nconst FormField = styled.label`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst disabledBtnStyles = `\r\n  pointer-events: none;\r\n  background-color: #bdbdbd;\r\n  outline: none;\r\n\r\n  :hover,\r\n  :focus {\r\n    background-color: #bdbdbd;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  display: inline;\r\n  border: 0;\r\n  padding: 6px 16px;\r\n  margin-left: 4px;\r\n  margin-right: 4px;\r\n  background-color: #3884ff;\r\n  border-radius: 3px;\r\n  transition: all 200ms ease;\r\n  font-family: inherit;\r\n  font-size: 16px;\r\n  font-weight: 500;\r\n  line-height: 24px;\r\n  font-style: normal;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  color: #fff;\r\n  cursor: pointer;\r\n\r\n  :hover,\r\n  :focus {\r\n    background-color: #1f65d6;\r\n  }\r\n\r\n  ${({ disabled }) => disabled && disabledBtnStyles}\r\n`;\r\n\r\nexport default function ContactForm({ onAddContact, isNameUnique }) {\r\n  // Form inputs\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleNameInput = e => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleNumberInput = e => {\r\n    setNumber(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!isNameUnique(name)) {\r\n      toast.warning(`Contact ${name} already exists`);\r\n      return;\r\n    }\r\n\r\n    const newContact = { id: uuidv1(), name, number };\r\n    onAddContact(newContact);\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  // Submit button\r\n  const [btnDisabled, setBtnDisabled] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setBtnDisabled(!name || !number);\r\n  }, [name, number]);\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <FormField htmlFor=\"name\">\r\n        <span>Name: </span>\r\n        <input\r\n          id=\"name\"\r\n          name=\"name\"\r\n          type=\"text\"\r\n          value={name}\r\n          onChange={handleNameInput}\r\n        />\r\n      </FormField>\r\n\r\n      <FormField htmlFor=\"number\">\r\n        <span>Number: </span>\r\n        <input\r\n          id=\"number\"\r\n          name=\"number\"\r\n          type=\"tel\"\r\n          value={number}\r\n          onChange={handleNumberInput}\r\n        />\r\n      </FormField>\r\n\r\n      <Button type=\"submit\" disabled={btnDisabled}>\r\n        Add contact\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onAddContact: PropTypes.func.isRequired,\r\n  isNameUnique: PropTypes.func.isRequired,\r\n};\r\n\r\n// export default class AddingContactForm extends Component {\r\n//   static propTypes = {\r\n//     onAddContact: PropTypes.func.isRequired,\r\n//     isNameUnique: PropTypes.func.isRequired,\r\n//   };\r\n\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//     btnDisabled: true,\r\n//   };\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     const { name, number } = this.state;\r\n\r\n//     if (prevState.name !== name || prevState.number !== number) {\r\n//       this.checkForEmptyFields();\r\n//     }\r\n//   }\r\n\r\n//   checkForEmptyFields = () => {\r\n//     const { name, number } = this.state;\r\n\r\n//     if (name && number) {\r\n//       this.setState({\r\n//         btnDisabled: false,\r\n//       });\r\n//     } else {\r\n//       this.setState({\r\n//         btnDisabled: true,\r\n//       });\r\n//     }\r\n//   };\r\n\r\n//   handleInput = e => {\r\n//     this.setState({\r\n//       [e.target.name]: e.target.value,\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n\r\n//     const { name, number } = this.state;\r\n//     const { isNameUnique, onAddContact } = this.props;\r\n\r\n//     if (!isNameUnique(name)) {\r\n//       toast.warning(`Contact ${name} already exists`);\r\n//       return;\r\n//     }\r\n\r\n//     const contact = { id: uuidv1(), name, number };\r\n\r\n//     onAddContact(contact);\r\n\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => this.setState({ name: '', number: '' });\r\n\r\n//   render() {\r\n//     const { name, number, btnDisabled } = this.state;\r\n\r\n//     return (\r\n//       <Form onSubmit={this.handleSubmit}>\r\n//         <FormField htmlFor=\"name\">\r\n//           <span>Name: </span>\r\n//           <input\r\n//             id=\"name\"\r\n//             name=\"name\"\r\n//             type=\"text\"\r\n//             value={name}\r\n//             onChange={this.handleInput}\r\n//           />\r\n//         </FormField>\r\n\r\n//         <FormField htmlFor=\"number\">\r\n//           <span>Number: </span>\r\n//           <input\r\n//             id=\"number\"\r\n//             name=\"number\"\r\n//             type=\"tel\"\r\n//             value={number}\r\n//             onChange={this.handleInput}\r\n//           />\r\n//         </FormField>\r\n\r\n//         <Button type=\"submit\" disabled={btnDisabled}>\r\n//           Add contact\r\n//         </Button>\r\n//       </Form>\r\n//     );\r\n//   }\r\n// }\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport uuidv1 from 'uuid/v1';\r\n\r\nconst List = styled.ul`\r\n  padding: 0;\r\n  width: 300px;\r\n`;\r\n\r\nconst ListItem = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst ContactLine = styled.div`\r\n  margin: 8px 0px;\r\n`;\r\n\r\nexport default function ContactsList({ contacts, onDelete }) {\r\n  return (\r\n    <List>\r\n      {contacts.map(contact => (\r\n        <ListItem key={uuidv1()}>\r\n          <div>\r\n            <ContactLine>Name: {contact.name}</ContactLine>\r\n            <ContactLine>Number: {contact.number}</ContactLine>\r\n          </div>\r\n          <button type=\"button\" onClick={() => onDelete(contact.id)}>\r\n            Delete\r\n          </button>\r\n        </ListItem>\r\n      ))}\r\n    </List>\r\n  );\r\n}\r\n\r\nContactsList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Filter({ onSearch }) {\r\n  const [input, setInput] = useState('');\r\n\r\n  const handleInput = e => {\r\n    const input = e.target.value;\r\n\r\n    setInput(input);\r\n    onSearch(input);\r\n  };\r\n\r\n  return (\r\n    <label htmlFor=\"query\">\r\n      <span>Filter contacts by name: </span>\r\n      <input id=\"query\" type=\"text\" onChange={handleInput} value={input} />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  onSearch: PropTypes.func.isRequired,\r\n};\r\n\r\n// export default class Filter extends Component {\r\n//   static propTypes = {\r\n//     onSearch: PropTypes.func.isRequired,\r\n//   };\r\n\r\n//   state = {\r\n//     input: '',\r\n//   };\r\n\r\n//   handleInput = e => {\r\n//     const input = e.target.value;\r\n\r\n//     this.setState({ input });\r\n\r\n//     this.props.onSearch(input);\r\n//   };\r\n\r\n//   render() {\r\n//     const { input } = this.state;\r\n\r\n//     return (\r\n//       <label htmlFor=\"query\">\r\n//         <span>Filter contacts by name: </span>\r\n//         <input\r\n//           id=\"query\"\r\n//           type=\"text\"\r\n//           onChange={this.handleInput}\r\n//           value={input}\r\n//         />\r\n//       </label>\r\n//     );\r\n//   }\r\n// }\r\n","import { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst save = (key, value) => {\r\n  try {\r\n    localStorage.setItem(key, JSON.stringify(value));\r\n  } catch (error) {\r\n    toast.warning(\"Could't save the last change\");\r\n  }\r\n};\r\n\r\nconst get = key => {\r\n  try {\r\n    return JSON.parse(localStorage.getItem(key));\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default {\r\n  get,\r\n  save,\r\n};\r\n","import React, { useState, useReducer, useMemo, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nimport ContactForm from './ContactForm';\r\nimport ContactsList from './ContactsList';\r\nimport Filter from './Filter';\r\n\r\nimport storage from './services/local-storage';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  padding: 50px 0;\r\n  color: #222;\r\n  font-family: 'Roboto', sans-serif;\r\n`;\r\n\r\nconst contactsReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'addContact':\r\n      return [...state, action.payload.contact];\r\n\r\n    case 'removeContact':\r\n      return state.filter(contact => contact.id !== action.payload.contactId);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default function App() {\r\n  // Contacts\r\n  const [contacts, dispatch] = useReducer(\r\n    contactsReducer,\r\n    storage.get('contacts') || [],\r\n  );\r\n\r\n  const handleAddContact = contact => {\r\n    dispatch({ type: 'addContact', payload: { contact } });\r\n  };\r\n\r\n  const handleDelete = contactId => {\r\n    dispatch({ type: 'removeContact', payload: { contactId } });\r\n  };\r\n\r\n  // Contacts display filter\r\n  useEffect(() => {\r\n    storage.save('contacts', contacts);\r\n  }, [contacts]);\r\n\r\n  const [filter, setFilter] = useState('');\r\n\r\n  const handleSearch = query => {\r\n    setFilter(query);\r\n  };\r\n\r\n  const contactsToShow = useMemo(() => {\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  }, [contacts, filter]);\r\n\r\n  // New Contact validation\r\n  const checkIfNameUnique = name =>\r\n    contacts.every(contact => contact.name !== name);\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <h2>Phonebook</h2>\r\n\r\n        <ContactForm\r\n          onAddContact={handleAddContact}\r\n          isNameUnique={checkIfNameUnique}\r\n        />\r\n\r\n        <section>\r\n          <h2>Contacts</h2>\r\n\r\n          {contacts.length ? (\r\n            <>\r\n              <Filter onSearch={handleSearch} />\r\n              <ContactsList contacts={contactsToShow} onDelete={handleDelete} />\r\n            </>\r\n          ) : (\r\n            <p>No saved contacts</p>\r\n          )}\r\n        </section>\r\n      </div>\r\n    </Container>\r\n  );\r\n}\r\n\r\n// export default class App extends Component {\r\n//   state = {\r\n//     contacts: [],\r\n//     filter: '',\r\n//   };\r\n\r\n//   handleAddContact = сontact => {\r\n//     this.setState(prev => ({\r\n//       contacts: [...prev.contacts, сontact],\r\n//     }));\r\n//   };\r\n\r\n//   handleSearch = query => {\r\n//     this.setState({ filter: query });\r\n//   };\r\n\r\n//   handleDelete = name => {\r\n//     const { contacts } = this.state;\r\n\r\n//     this.setState({\r\n//       contacts: contacts.filter(contact => contact.name !== name),\r\n//     });\r\n//   };\r\n\r\n//   checkIfNameUnique = name =>\r\n//     this.state.contacts.every(contact => contact.name !== name);\r\n\r\n//   render() {\r\n//     const { contacts, filter } = this.state;\r\n\r\n//     const contactsToShow = getContactsToShow(contacts, filter);\r\n\r\n//     return (\r\n//       <Container>\r\n//         <div>\r\n//           <h2>Phonebook</h2>\r\n\r\n//           <ContactForm\r\n//             onAddContact={this.handleAddContact}\r\n//             isNameUnique={this.checkIfNameUnique}\r\n//           />\r\n\r\n//           <section>\r\n//             <h2>Contacts</h2>\r\n\r\n//             {contacts.length ? (\r\n//               <>\r\n//                 <Filter onSearch={this.handleSearch} />\r\n//                 <ContactsList\r\n//                   contacts={contactsToShow}\r\n//                   onDelete={this.handleDelete}\r\n//                 />\r\n//               </>\r\n//             ) : (\r\n//               <p>No saved contacts</p>\r\n//             )}\r\n//           </section>\r\n//         </div>\r\n//       </Container>\r\n//     );\r\n//   }\r\n// }\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}